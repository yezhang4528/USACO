fin = open("teleport.in", "r")
fout = open("teleport.out", "w")

numLines = int(fin.readline())

# 1st element: negative and positive Sum for decide teleport Y position
# 2nd element: number of elements
negPair = [0, 0]
posPair = [0, 0]
negativeNavD = 0
positiveNavD = 0
unCalculateDList = []

def calculateSum(inPair):
    global negPair, posPair
    global negativeNavD, positiveNavD
    global unCalculateDList

    dx = abs(inPair[0] - inPair[1])
    if inPair[0] < 0:
        if dx <= abs(inPair[0]) and dx <= abs(inPair[1]):
            negativeNavD += dx
        elif dx > abs(inPair[0]) or dx > abs(inPair[1]):
            if inPair[1] < 0:
                negPair[0] += inPair[0]
                negPair[0] += inPair[1]
                negPair[1] += 2
            else:
                negPair[0] += inPair[0]
                negPair[1] += 1
                posPair[0] += inPair[1]
                posPair[1] += 1
            unCalculateDList.append(inPair)
    elif inPair[0] > 0:
        if dx <= abs(inPair[0]) and dx <= abs(inPair[1]):
            positiveNavD += dx
        elif dx > abs(inPair[0]) or dx > abs(inPair[1]):
            if inPair[1] > 0:
                posPair[0] += inPair[0]
                posPair[0] += inPair[1]
                posPair[1] += 2
            else:
                posPair[0] += inPair[0]
                posPair[1] += 1
                negPair[0] += inPair[1]
                negPair[1] += 1
            unCalculateDList.append(inPair)
    else:
        if dx > 0:
            if inPair[1] > 0:
                posPair[0] += inPair[1]
                posPair[1] += 1
            else:
                negPair[0] += inPair[1]
                negPair[1] += 1
            unCalculateDList.append(inPair)

def getFinalNavDistance(teleportY):
    global negativeNavD, positiveNavD, unCalculateDList
    navD = negativeNavD + positiveNavD
    for i in range(0, len(unCalculateDList)):
        px = unCalculateDList[i][0]
        py = unCalculateDList[i][1]
        if teleportY > 0:
            if px < 0 and py < 0:
                navD += abs(px - py)
            else:
                if px > 0:
                    navD = navD + abs(py) + abs(px - teleportY)
                else:
                    navD = navD + abs(px) + abs(py - teleportY)
        else:
            if px > 0 and py > 0:
                navD += abs(px - py)
            else:
                if px < 0:
                    navD = navD + abs(py) + abs(px - teleportY)
                else:
                    navD = navD + abs(px) + abs(py - teleportY)
    return navD
        

def placeTeleport():
    global negPair, posPair
    teleportY = 0
    if abs(negPair[0]) > abs(posPair[0]):
        if negPair[1] == 1:
            teleportY = negPair[0]
        else:
            teleportY = negPair[0] // negPair[1]
    elif abs(negPair[0]) < abs(posPair[0]):
        if posPair[1] == 1:
            teleportY = posPair[0]
        else:
            teleportY = posPair[0] // posPair[1]
    else:
        if negPair[1] > posPair[1]:
            teleportY = negPair[0] // negPair[1] 
        else:
            teleportY = posPair[0] // posPair[1]

    print("teleportY: " + str(teleportY))
    return getFinalNavDistance(teleportY)


for i in range(0, numLines):
    inList = (int(x) for x in fin.readline().split())
    myPair = tuple(inList)
    calculateSum(myPair)

print(negPair)
print(posPair)
print(negativeNavD)
print(positiveNavD)
print(unCalculateDList)

resultNavigationDistance = placeTeleport()
fout.write(str(resultNavigationDistance))

fin.close()
fout.close()
